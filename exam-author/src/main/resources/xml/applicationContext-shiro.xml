<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <description>Shiro Configuration</description>

    <!-- 核心配置验证管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- 缓存管理器 -->
        <property name="cacheManager" ref="cacheManager"/>
        <property name="realm" ref="autoRealm"/>
    </bean>

    <!-- 缓存管理器
        引入EHCache管理，通过配置文件管理
    -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <!-- 缓存管理器配置文件 -->
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>

   <!--
        配置Realm
        自定义Realm
    -->
    <bean id="autoRealm" class="com.exam.system.test.common.shiro.TestAutoRealm"></bean>


    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- 启用shrio注解，依赖 lifecycleBeanPostProcessor-->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- 配置shiroFilter
        id需与web.xml中配置的DelegatingFilterProxy配置file-name一致
    -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- 验证管理器 -->
        <property name="securityManager" ref="securityManager"/>
        <!-- 登录页面 -->
        <property name="loginUrl" value="/test/toLogin"/>
        <!-- 登录成功页面 -->
        <property name="successUrl" value="/test/toList"/>
        <!-- 没有权限页面 -->
        <property name="unauthorizedUrl" value="/unauthorized.html"/>
        <!--
               配置那些页面需要权限验证
               anon ：可以匿名访问
               authc:需要认证之后才能访问（登录之后）
        -->
        <property name="filterChainDefinitions">
            <value>
                /toLogin = anon
                # everything else requires authentication:
                /** = authc
            </value>
        </property>
    </bean>
</beans>